Create To-Do items and what properties they should have

To-Do list should have projects 

THE PLAN!!!:
uhh check previous projects that you frogot since its been months build onto that

plan B:
keep getting lost lmao go figure things out
you should believe!!!

progress in order:

Finished Create Project Button utilizing addprojectotprojectarr
Finished Create To Do button creating todos using the todo factory method
Finished Selecting Projects and showing the todos based on it
Finished Remove Project and Todos Functionality

TODO:
High: When these are done it can now be submitted
Improve Styles and make it look like a website app todolist
use date-fns functions 
improve the todo functionality and display

these between medium and low can be implemented on free time for the cs50 PROJECT pass basically qol updates
Low
possibly a checklist function for todos
setting that can delete all finished todos

Reflection:


---
-old
-
-

old code can be used just moved here

 const editFormModal = (index) => {

        const toDoFormContainer = document.querySelector('.toDoFormContainer');

        const existingEditForm = document.querySelector('.editToDoForm');
        if (existingEditForm) {
            return;
        }
        
        const editToDoForm = document.createElement('form');
        editToDoForm.classList.add('editToDoForm');
    
        const inputs = [
            {label: 'ToDo Name:', type:'text', name:'toDoName', id:'editToDoName' },
            {label: 'ToDo Description:', type:'text', name:'toDoDescription', id:'editToDoDescription'}, 
        ];
    
        inputs.forEach((inputData) => {
            const label = document.createElement('label');
            label.textContent = inputData.label;
            label.setAttribute('for', inputData.id);
    
            const input = document.createElement('input');
            input.type = inputData.type;
            input.name = inputData.name;
            input.id = inputData.id;
    
            input.required = true;
    
            editToDoForm.appendChild(label);
            editToDoForm.appendChild(input);
            editToDoForm.appendChild(document.createElement('br'));     
        });
    
        const submitButton = document.createElement('button');
        submitButton.setAttribute('type', 'submit');
        submitButton.textContent = 'Edit ToDo';
        editToDoForm.appendChild(submitButton);
            
        const closeButton = document.createElement('button');
        closeButton.setAttribute('type', 'button');
        closeButton.textContent = 'Close';
        editToDoForm.appendChild(closeButton);
    
        toDoFormContainer.appendChild(editToDoForm);
        closeButton.addEventListener('click', () => {
            editToDoForm.remove();
        });
    
        editToDoForm.addEventListener('submit', (e) => {
            e.preventDefault();
                
            const toDoName = document.querySelector('#editToDoName').value;
            const toDoDescription = document.querySelector('#editToDoDescription').value;
            //other values as well in the future to be noted
            instanceOfTodos.updateToDo(projectPosition, index, toDoName, toDoDescription);
            toDoDisplayFunc(projectPosition);
    
            editToDoForm.remove();
        });
    }
